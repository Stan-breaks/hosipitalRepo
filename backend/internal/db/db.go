// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createDoctorStmt, err = db.PrepareContext(ctx, createDoctor); err != nil {
		return nil, fmt.Errorf("error preparing query CreateDoctor: %w", err)
	}
	if q.createHospitalStmt, err = db.PrepareContext(ctx, createHospital); err != nil {
		return nil, fmt.Errorf("error preparing query CreateHospital: %w", err)
	}
	if q.createReviewStmt, err = db.PrepareContext(ctx, createReview); err != nil {
		return nil, fmt.Errorf("error preparing query CreateReview: %w", err)
	}
	if q.createServiceStmt, err = db.PrepareContext(ctx, createService); err != nil {
		return nil, fmt.Errorf("error preparing query CreateService: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.getAllHospitalsStmt, err = db.PrepareContext(ctx, getAllHospitals); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllHospitals: %w", err)
	}
	if q.getAllUsersStmt, err = db.PrepareContext(ctx, getAllUsers); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllUsers: %w", err)
	}
	if q.getDoctorsByHospitalStmt, err = db.PrepareContext(ctx, getDoctorsByHospital); err != nil {
		return nil, fmt.Errorf("error preparing query GetDoctorsByHospital: %w", err)
	}
	if q.getReviewsByHospitalStmt, err = db.PrepareContext(ctx, getReviewsByHospital); err != nil {
		return nil, fmt.Errorf("error preparing query GetReviewsByHospital: %w", err)
	}
	if q.getServicesByHospitalStmt, err = db.PrepareContext(ctx, getServicesByHospital); err != nil {
		return nil, fmt.Errorf("error preparing query GetServicesByHospital: %w", err)
	}
	if q.getUserByEmailStmt, err = db.PrepareContext(ctx, getUserByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByEmail: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createDoctorStmt != nil {
		if cerr := q.createDoctorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createDoctorStmt: %w", cerr)
		}
	}
	if q.createHospitalStmt != nil {
		if cerr := q.createHospitalStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createHospitalStmt: %w", cerr)
		}
	}
	if q.createReviewStmt != nil {
		if cerr := q.createReviewStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createReviewStmt: %w", cerr)
		}
	}
	if q.createServiceStmt != nil {
		if cerr := q.createServiceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createServiceStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.getAllHospitalsStmt != nil {
		if cerr := q.getAllHospitalsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllHospitalsStmt: %w", cerr)
		}
	}
	if q.getAllUsersStmt != nil {
		if cerr := q.getAllUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllUsersStmt: %w", cerr)
		}
	}
	if q.getDoctorsByHospitalStmt != nil {
		if cerr := q.getDoctorsByHospitalStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDoctorsByHospitalStmt: %w", cerr)
		}
	}
	if q.getReviewsByHospitalStmt != nil {
		if cerr := q.getReviewsByHospitalStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getReviewsByHospitalStmt: %w", cerr)
		}
	}
	if q.getServicesByHospitalStmt != nil {
		if cerr := q.getServicesByHospitalStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getServicesByHospitalStmt: %w", cerr)
		}
	}
	if q.getUserByEmailStmt != nil {
		if cerr := q.getUserByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByEmailStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                        DBTX
	tx                        *sql.Tx
	createDoctorStmt          *sql.Stmt
	createHospitalStmt        *sql.Stmt
	createReviewStmt          *sql.Stmt
	createServiceStmt         *sql.Stmt
	createUserStmt            *sql.Stmt
	getAllHospitalsStmt       *sql.Stmt
	getAllUsersStmt           *sql.Stmt
	getDoctorsByHospitalStmt  *sql.Stmt
	getReviewsByHospitalStmt  *sql.Stmt
	getServicesByHospitalStmt *sql.Stmt
	getUserByEmailStmt        *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                        tx,
		tx:                        tx,
		createDoctorStmt:          q.createDoctorStmt,
		createHospitalStmt:        q.createHospitalStmt,
		createReviewStmt:          q.createReviewStmt,
		createServiceStmt:         q.createServiceStmt,
		createUserStmt:            q.createUserStmt,
		getAllHospitalsStmt:       q.getAllHospitalsStmt,
		getAllUsersStmt:           q.getAllUsersStmt,
		getDoctorsByHospitalStmt:  q.getDoctorsByHospitalStmt,
		getReviewsByHospitalStmt:  q.getReviewsByHospitalStmt,
		getServicesByHospitalStmt: q.getServicesByHospitalStmt,
		getUserByEmailStmt:        q.getUserByEmailStmt,
	}
}
