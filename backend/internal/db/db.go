// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.addHospitalSpecialtyStmt, err = db.PrepareContext(ctx, addHospitalSpecialty); err != nil {
		return nil, fmt.Errorf("error preparing query AddHospitalSpecialty: %w", err)
	}
	if q.createAppointmentStmt, err = db.PrepareContext(ctx, createAppointment); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAppointment: %w", err)
	}
	if q.createDoctorStmt, err = db.PrepareContext(ctx, createDoctor); err != nil {
		return nil, fmt.Errorf("error preparing query CreateDoctor: %w", err)
	}
	if q.createHospitalStmt, err = db.PrepareContext(ctx, createHospital); err != nil {
		return nil, fmt.Errorf("error preparing query CreateHospital: %w", err)
	}
	if q.createReviewStmt, err = db.PrepareContext(ctx, createReview); err != nil {
		return nil, fmt.Errorf("error preparing query CreateReview: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteHospitalStmt, err = db.PrepareContext(ctx, deleteHospital); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteHospital: %w", err)
	}
	if q.getAppointmentsStmt, err = db.PrepareContext(ctx, getAppointments); err != nil {
		return nil, fmt.Errorf("error preparing query GetAppointments: %w", err)
	}
	if q.getDoctorStmt, err = db.PrepareContext(ctx, getDoctor); err != nil {
		return nil, fmt.Errorf("error preparing query GetDoctor: %w", err)
	}
	if q.getDoctorAppointmentsStmt, err = db.PrepareContext(ctx, getDoctorAppointments); err != nil {
		return nil, fmt.Errorf("error preparing query GetDoctorAppointments: %w", err)
	}
	if q.getDoctorByEmailStmt, err = db.PrepareContext(ctx, getDoctorByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetDoctorByEmail: %w", err)
	}
	if q.getDoctorsBySpecialtyStmt, err = db.PrepareContext(ctx, getDoctorsBySpecialty); err != nil {
		return nil, fmt.Errorf("error preparing query GetDoctorsBySpecialty: %w", err)
	}
	if q.getHospitalStmt, err = db.PrepareContext(ctx, getHospital); err != nil {
		return nil, fmt.Errorf("error preparing query GetHospital: %w", err)
	}
	if q.getHospitalReviewsStmt, err = db.PrepareContext(ctx, getHospitalReviews); err != nil {
		return nil, fmt.Errorf("error preparing query GetHospitalReviews: %w", err)
	}
	if q.getHospitalSpecialtiesStmt, err = db.PrepareContext(ctx, getHospitalSpecialties); err != nil {
		return nil, fmt.Errorf("error preparing query GetHospitalSpecialties: %w", err)
	}
	if q.getHospitalStatsStmt, err = db.PrepareContext(ctx, getHospitalStats); err != nil {
		return nil, fmt.Errorf("error preparing query GetHospitalStats: %w", err)
	}
	if q.getUserStmt, err = db.PrepareContext(ctx, getUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetUser: %w", err)
	}
	if q.getUserAppointmentsStmt, err = db.PrepareContext(ctx, getUserAppointments); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserAppointments: %w", err)
	}
	if q.getUserByEmailStmt, err = db.PrepareContext(ctx, getUserByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByEmail: %w", err)
	}
	if q.listDoctorsStmt, err = db.PrepareContext(ctx, listDoctors); err != nil {
		return nil, fmt.Errorf("error preparing query ListDoctors: %w", err)
	}
	if q.listHospitalsStmt, err = db.PrepareContext(ctx, listHospitals); err != nil {
		return nil, fmt.Errorf("error preparing query ListHospitals: %w", err)
	}
	if q.listHospitalsByLocationStmt, err = db.PrepareContext(ctx, listHospitalsByLocation); err != nil {
		return nil, fmt.Errorf("error preparing query ListHospitalsByLocation: %w", err)
	}
	if q.updateAppointmentStatusStmt, err = db.PrepareContext(ctx, updateAppointmentStatus); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateAppointmentStatus: %w", err)
	}
	if q.updateHospitalStmt, err = db.PrepareContext(ctx, updateHospital); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateHospital: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.addHospitalSpecialtyStmt != nil {
		if cerr := q.addHospitalSpecialtyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addHospitalSpecialtyStmt: %w", cerr)
		}
	}
	if q.createAppointmentStmt != nil {
		if cerr := q.createAppointmentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAppointmentStmt: %w", cerr)
		}
	}
	if q.createDoctorStmt != nil {
		if cerr := q.createDoctorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createDoctorStmt: %w", cerr)
		}
	}
	if q.createHospitalStmt != nil {
		if cerr := q.createHospitalStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createHospitalStmt: %w", cerr)
		}
	}
	if q.createReviewStmt != nil {
		if cerr := q.createReviewStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createReviewStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteHospitalStmt != nil {
		if cerr := q.deleteHospitalStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteHospitalStmt: %w", cerr)
		}
	}
	if q.getAppointmentsStmt != nil {
		if cerr := q.getAppointmentsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAppointmentsStmt: %w", cerr)
		}
	}
	if q.getDoctorStmt != nil {
		if cerr := q.getDoctorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDoctorStmt: %w", cerr)
		}
	}
	if q.getDoctorAppointmentsStmt != nil {
		if cerr := q.getDoctorAppointmentsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDoctorAppointmentsStmt: %w", cerr)
		}
	}
	if q.getDoctorByEmailStmt != nil {
		if cerr := q.getDoctorByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDoctorByEmailStmt: %w", cerr)
		}
	}
	if q.getDoctorsBySpecialtyStmt != nil {
		if cerr := q.getDoctorsBySpecialtyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDoctorsBySpecialtyStmt: %w", cerr)
		}
	}
	if q.getHospitalStmt != nil {
		if cerr := q.getHospitalStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getHospitalStmt: %w", cerr)
		}
	}
	if q.getHospitalReviewsStmt != nil {
		if cerr := q.getHospitalReviewsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getHospitalReviewsStmt: %w", cerr)
		}
	}
	if q.getHospitalSpecialtiesStmt != nil {
		if cerr := q.getHospitalSpecialtiesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getHospitalSpecialtiesStmt: %w", cerr)
		}
	}
	if q.getHospitalStatsStmt != nil {
		if cerr := q.getHospitalStatsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getHospitalStatsStmt: %w", cerr)
		}
	}
	if q.getUserStmt != nil {
		if cerr := q.getUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserStmt: %w", cerr)
		}
	}
	if q.getUserAppointmentsStmt != nil {
		if cerr := q.getUserAppointmentsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserAppointmentsStmt: %w", cerr)
		}
	}
	if q.getUserByEmailStmt != nil {
		if cerr := q.getUserByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByEmailStmt: %w", cerr)
		}
	}
	if q.listDoctorsStmt != nil {
		if cerr := q.listDoctorsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listDoctorsStmt: %w", cerr)
		}
	}
	if q.listHospitalsStmt != nil {
		if cerr := q.listHospitalsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listHospitalsStmt: %w", cerr)
		}
	}
	if q.listHospitalsByLocationStmt != nil {
		if cerr := q.listHospitalsByLocationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listHospitalsByLocationStmt: %w", cerr)
		}
	}
	if q.updateAppointmentStatusStmt != nil {
		if cerr := q.updateAppointmentStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateAppointmentStatusStmt: %w", cerr)
		}
	}
	if q.updateHospitalStmt != nil {
		if cerr := q.updateHospitalStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateHospitalStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                          DBTX
	tx                          *sql.Tx
	addHospitalSpecialtyStmt    *sql.Stmt
	createAppointmentStmt       *sql.Stmt
	createDoctorStmt            *sql.Stmt
	createHospitalStmt          *sql.Stmt
	createReviewStmt            *sql.Stmt
	createUserStmt              *sql.Stmt
	deleteHospitalStmt          *sql.Stmt
	getAppointmentsStmt         *sql.Stmt
	getDoctorStmt               *sql.Stmt
	getDoctorAppointmentsStmt   *sql.Stmt
	getDoctorByEmailStmt        *sql.Stmt
	getDoctorsBySpecialtyStmt   *sql.Stmt
	getHospitalStmt             *sql.Stmt
	getHospitalReviewsStmt      *sql.Stmt
	getHospitalSpecialtiesStmt  *sql.Stmt
	getHospitalStatsStmt        *sql.Stmt
	getUserStmt                 *sql.Stmt
	getUserAppointmentsStmt     *sql.Stmt
	getUserByEmailStmt          *sql.Stmt
	listDoctorsStmt             *sql.Stmt
	listHospitalsStmt           *sql.Stmt
	listHospitalsByLocationStmt *sql.Stmt
	updateAppointmentStatusStmt *sql.Stmt
	updateHospitalStmt          *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                          tx,
		tx:                          tx,
		addHospitalSpecialtyStmt:    q.addHospitalSpecialtyStmt,
		createAppointmentStmt:       q.createAppointmentStmt,
		createDoctorStmt:            q.createDoctorStmt,
		createHospitalStmt:          q.createHospitalStmt,
		createReviewStmt:            q.createReviewStmt,
		createUserStmt:              q.createUserStmt,
		deleteHospitalStmt:          q.deleteHospitalStmt,
		getAppointmentsStmt:         q.getAppointmentsStmt,
		getDoctorStmt:               q.getDoctorStmt,
		getDoctorAppointmentsStmt:   q.getDoctorAppointmentsStmt,
		getDoctorByEmailStmt:        q.getDoctorByEmailStmt,
		getDoctorsBySpecialtyStmt:   q.getDoctorsBySpecialtyStmt,
		getHospitalStmt:             q.getHospitalStmt,
		getHospitalReviewsStmt:      q.getHospitalReviewsStmt,
		getHospitalSpecialtiesStmt:  q.getHospitalSpecialtiesStmt,
		getHospitalStatsStmt:        q.getHospitalStatsStmt,
		getUserStmt:                 q.getUserStmt,
		getUserAppointmentsStmt:     q.getUserAppointmentsStmt,
		getUserByEmailStmt:          q.getUserByEmailStmt,
		listDoctorsStmt:             q.listDoctorsStmt,
		listHospitalsStmt:           q.listHospitalsStmt,
		listHospitalsByLocationStmt: q.listHospitalsByLocationStmt,
		updateAppointmentStatusStmt: q.updateAppointmentStatusStmt,
		updateHospitalStmt:          q.updateHospitalStmt,
	}
}
